version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  ruby: circleci/ruby@2.0.0

jobs:
  # cfn-lint:
  #   # executor: python/default　実行環境としてOrb由来使わずDockerイメージを使うので無効化
  #   docker:
  #     - image: cimg/python:3.12.0

  #   steps:
  #     - checkout
  #     - run: python --version
  #     - run: pip install --upgrade pip
  #     - run: pip --version
  #     - run: pip install cfn-lint
  #     - run:
  #         name: run cfn-lint
  #         command: |
  #           cfn-lint -i W3010 -t cloudformation/*.yml

  execute-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "OIDC-PROFILE"
          role_arn: "${AWS_ROLE_ARN}"
          role_session_name: "CircleC-IOIDC-session"
          #aws-cli/installは不要(setupメソッドに内包されているため)

      - run:
          name: Set AWS Profile
          command: echo 'export AWS_PROFILE="OIDC-PROFILE"' >> $BASH_ENV
          #CFnデプロイのコマンドでは以下の例のように--profileのオプションを付ける必要があるが、ここで環境変数として設定しておくことで冗長な記述を回避できます。
          #参考）https://docs.aws.amazon.com/ja_jp/cli/v1/userguide/cli-configure-files.html#cli-configure-files-using-profiles
          #AWS_PROFILEを使わないときのコマンドの例：aws cloudformation deploy --template-file cloudformation/vpc-01.yml --stack-name vpc-01 --profile "OIDC-PROFILE"

      - run:
          name: cloudformation deploy
          command: |
            set -x
            aws cloudformation deploy --template-file cloudformation/vpc-01.yml --stack-name vpc-01
            aws cloudformation deploy --template-file cloudformation/sg-02.yml --stack-name sg-02
            aws cloudformation deploy --template-file cloudformation/ec2-03.yml --stack-name ec2-03 --capabilities CAPABILITY_IAM
            aws cloudformation deploy --template-file cloudformation/rds-04.yml --stack-name rds-04
            aws cloudformation deploy --template-file cloudformation/alb-05.yml --stack-name alb-05
            aws cloudformation deploy --template-file cloudformation/s3-06.yml --stack-name s3-06

      - run: 
          name: set environment variable
          command: |
            set -x
            echo export EC2_PUBLIC_IP="$(aws cloudformation describe-stacks --stack-name ec2-03  | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "EC2PublicIP") | .OutputValue ')" >> $BASH_ENV
            echo export AWS_ALB_DNS="$(aws cloudformation describe-stacks --stack-name alb-05 | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "LoadBalancerDNSName")| .OutputValue')" >> $BASH_ENV
            # echo export AWS_RDS_ENDPOINT"$(aws cloudformation describe-stacks --stack-name rds-04 | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "RDSEndpoint")| .OutputValue')" >> $BASH_ENV
            # echo export S3_BUCKET_NAME="$(aws s3 ls | sort -nr | head -n 1 | awk '{print $NF}')" >> $BASH_ENV
            source $BASH_ENV
      
      # - run: 
      #     name: set AWS_ALB_DNS
      #     command: |
      #       set -x
      #       echo export AWS_ALB_DNS="$(aws cloudformation describe-stacks --stack-name alb-05 | jq -r '.Stacks[] | .Outputs[] | select(.OutputKey == "LoadBalancerDNSName")| .OutputValue')" >> $BASH_ENV    
      #       source $BASH_ENV 
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env
  
  # execute-ansible:
  #   docker:
  #     - image: cimg/python:3.12.0
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "${KEY_FINGERPRINT}"
  #     - run: python --version
  #     - run: pip install --upgrade pip
  #     - run: pip --version
  #     - run: 
  #         name: install ansible
  #         command: pip install ansible==9.6.0 #バージョン指定なしの場合で2.17がインストールされたときにruby環境構築用の各種パッケージがyumモジュールで入らなかったのでバージョン指定しました(core:2.16.7)
  #     - run: ansible --version
  #     - run:
  #         name: Execute Ansible Playbook
  #         command: ansible-playbook -i ansible/inventory ansible/site.yml
          
  
  # execute-serverspec:
  #   executor: ruby/default
  #   steps:
  #     - checkout
  #     # サーバーのセットアップ
  #     - run:
  #         name: bundle install
  #         command: |
  #           cd serverspec
  #           gem list -e rails
  #           bundle install --path vendor/bundle

  #     # Serverspecのテストを実行
  #     - run:
  #         name: execute serverspec
  #         command: |
  #           cd serverspec
  #           bundle exec rake spec



workflows:
  CircleCItest:
    jobs:
      # - cfn-lint
      # - execute-cfn:
      #     context: aws
      #     requires:
      #       - cfn-lint
      - execute-cfn:
          context: aws
      # - execute-ansible:
      #     requires:
      #       - execute-cfn
      # - execute-serverspec:
      #     requires:
      #       - execute-ansible
