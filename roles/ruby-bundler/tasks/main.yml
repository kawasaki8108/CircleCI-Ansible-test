---
# コンパイラ系のインストール
- name: Install packages for ruby
  become: true
  ansible.builtin.yum:
    name: 
      - gcc-c++
      - glibc-headers
      - openssl-devel
      - libyaml-devel
      - readline
      - readline-devel
      - zlib
      - zlib-devel
      - libffi-devel
      - libxml2 
      - libxslt 
      - libxml2-devel 
      - libxslt-devel 
      - sqlite-devel

#-------
#rbenv
#-------
- name: check rbenv install
  ansible.builtin.command: bash -lc "rbenv --version"
  # ansible.builtin.command: bash -lc "/home/ec2-user/.rbenv/bin/rbenv --version"
  register: rbenv_exists
  changed_when: no
  ignore_errors: true

- name: Install rbenv
  ansible.builtin.git:
    repo: https://github.com/sstephenson/rbenv.git
    dest: /home/ec2-user/.rbenv
  when: rbenv_exists is failed

- name: Add /home/ec2-user.rbenv/bin to PATH
  ansible.builtin.lineinfile:
    path: /home/ec2-user/.bashrc
    search_string: 'export PATH=/home/ec2-user/.rbenv/bin:$PATH'
    line: export PATH=/home/ec2-user/.rbenv/bin:$PATH
    state: present
  when: rbenv_exists is failed

- name: Add /home/ec2-user.rbenv/bin to PATH 2
  ansible.builtin.lineinfile:
    path: /home/ec2-user/.bashrc
    search_string: 'eval "$(rbenv init -)"'
    line: eval "$(rbenv init -)"
    state: present
  when: rbenv_exists is failed

- name: source /home/ec2-user/.bashrc 
  ansible.builtin.command: bash -lc "source /home/ec2-user/.bashrc" 
  changed_when: false

#-------
#ruby
#-------
- name: check ruby install
  ansible.builtin.command: bash -lc "rbenv version | grep {{ ruby_version }}"
  register: ruby_exists
  changed_when: false
  ignore_errors: true

- name: Install ruby-build1
  ansible.builtin.git:
    repo: https://github.com/sstephenson/ruby-build.git
    dest: /home/ec2-user/.rbenv/plugins/ruby-build
  when: ruby_exists is failed

- name: Install ruby-build2
  become: true
  ansible.builtin.command: bash -lc "/home/ec2-user/.rbenv/plugins/ruby-build/install.sh"
  #-l：bashをログインシェルとした場合と同様に起動。-c：""内をコマンドとして実行する
  when: ruby_exists is failed

- name: Install ruby
  # become: true
  ansible.builtin.command: bash -lc "rbenv install {{ ruby_version }} --skip-existing"
  timeout: 900
  when: ruby_exists is failed

- name: ruby grobal set
  # become: true
  ansible.builtin.command: bash -lc "rbenv global {{ ruby_version }}"
  #この段階でgemとbundlerがインストールされている状態（~/.rbenv/shims/にてパス通っている）
  when: ruby_exists is failed

# -----------------------------------------------------
# nodejs
# -----------------------------------------------------
- name: check node.js install
  ansible.builtin.command: bash -lc "node --version | grep {{ node_version }}"
  register: nodejs_exists
  changed_when: no
  ignore_errors: true

- name: Setup nvm and nodejs1
  # become: true
  ansible.builtin.command: bash -lc "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"
  when: nodejs_exists is failed

- name: Setup nvm and nodejs2
  # become: true
  ansible.builtin.command: bash -lc "source ~/.bashrc"
  when: nodejs_exists is failed

- name: Setup nvm and nodejs3
  # become: true
  ansible.builtin.command: bash -lc "nvm install {{ node_version }}"
  when: nodejs_exists is failed

- name: Setup nvm and nodejs4
  # become: true
  ansible.builtin.command: bash -lc "nvm use {{ node_version }}"
  when: nodejs_exists is failed

- name: Setup nvm and nodejs
  # become: true
  ansible.builtin.command: bash -lc "nvm alias default {{ node_version }}"
  when: nodejs_exists is failed


# -----------------------------------------------------
# yarn
# -----------------------------------------------------
- name: check yarn install
  ansible.builtin.command: yarn --version
  register: yarn_exists
  changed_when: no
  ignore_errors: true

# - name: Setup Yum repo for yarn
#   become: true
#   command: "curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo"
#   when: yarn_exists is failed

- name: yarn install
  ansible.builtin.command: bash -lc "npm install --global yarn"
  when: yarn_exists is failed

- name: check yarn install version
  ansible.builtin.command: bash -lc "yarn --version  | grep {{ yarnversion }}"
  register: yarn_exists_wedefined_version
  changed_when: no
  ignore_errors: true

- name: set yarn version
  ansible.builtin.command: bash -lc "yarn set version {{ yarnversion }}"
  when: yarn_exists_wedefined_version is failed

# -----------------------------------------------------
# bundler
# -----------------------------------------------------
- name: check bundler install
  ansible.builtin.command: bash -lc "bundler version | grep {{ bundler_version }}"
  register: bundler_exists
  changed_when: no
  ignore_errors: true

- name: "install bundler {{ bundler_version }}"
  # ansible.builtin.command: bash -lc "gem install bundler -v {{ bundler_version }}"
  ansible.builtin.gem: 
    name: bundler
    version: "{{ bundler_version }}"
    user_install: no
  timeout: 300
  when: bundler_exists is failed



